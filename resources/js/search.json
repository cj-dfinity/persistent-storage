[[{"l":"Persistent Storage","p":["The purpose of this example dapp is to build a simple counter dapp, where the counter value will persist even after the dapp has changed and been re-deployed.","This example covers:","Create new canister smart contract using Motoko","Add backend functions for a counter (increment, get count and reset count)","Deploy the canister smart contract locally","Test backend with Candid UI and command line using dfx","Counter Frontend"]}],[{"l":"1. Installation","p":["This example project can be cloned, installed and deployed locally, for learning and testing purposes. The instructions are based on running the example on either macOS or Linux, but when using WSL2 on Windows, the instructions will be the same."]},{"i":"11-prerequisites","l":"1.1. Prerequisites","p":["The example project requeres the following installed:","git","dfx","git can be installed from various package managers. dfx can be installed following the instructions here."]},{"i":"12-install","l":"1.2. Install","p":["Install the example dapp project:"]}],[{"l":"2. Motoko backend","p":["The backend functions are located in the src/persistent_storage/main.mo Motoko file. The backend stores the counter value, and has functions to get, increment and reset the counter value. Furthermore the backend insures the counter value persists upgrades of the dapp."]},{"i":"21-counter-variable","l":"2.1. Counter variable","p":["The current counter value is stored as a number in the actor."]},{"i":"22-increment","l":"2.2. increment()","p":["The increment() function increments the counter variable.","The function is returning the incremented counter variable."]},{"i":"23-get","l":"2.3. get()","p":["The get() function returns the current counter value."]},{"i":"24-reset","l":"2.4. reset()","p":["The reset() function resets the counter value to 0 and returns the value."]},{"i":"25-candid-interface","l":"2.5. Candid interface","p":["The Candid interface is automatically created, and it has a convenient UI, which provides an easy, user-friendly way to test the backend."]}],[{"l":"3. Deployment","p":["The local network is started by running this command:","When the local network is up and running, run this command to deploy the canisters:"]}],[{"l":"4. Testing","p":["There are two ways of testing the functionality of this example dapp. One way is by making command line requests using DFX, and the other way is to use the Candid UI. Before the example dapp can be tested, it must be deployed (locally) as described in the above Deployment section."]},{"i":"41-dfx","l":"4.1. dfx","p":["dfx has a subset of commands for canister operations, and one of them enables calling the public functions added to the main.mo file in the previous step. In the following examples the initial value is 0. increment will increment value and return 1, get will return the current value and reset will set the value to 0.","Command usage: dfx canister call project function","The persistence of the stored value can be tested by calling the increment function again and making sure the value is larger than zero. Then make a change in the Motoko code, any minor change like changing the function name get to getCount, and then re-deploy the project and call the getCount function to verify that the counter value did not change back to the initial value (0)."]},{"i":"42-candid-ui","l":"4.2. Candid UI","p":["The Candid UI provides an easy, user friendly interface for testing the backend. The UI is automatically generated, and the canister ID can be found by using the dfx canister id canister_name command:","http://<candid_canister_id>.localhost:8000/?id=<backend_canister_id>","Candid UI"]}],[{"l":"5. Contribute","p":["This project is licensed under the Apache 2.0 license, see LICENSE.md for details. See CONTRIBUTE.md for details about how to contribute to this project."]}]]